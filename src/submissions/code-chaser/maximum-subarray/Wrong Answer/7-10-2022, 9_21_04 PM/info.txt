{"id":743510529,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1657468264,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/743510529/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"N/A","code":"class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        vector<int> prefixSum = nums;\n        int maxElement = nums[0];\n        for(int i = 1; i < nums.size(); i++)\n            prefixSum[i] += prefixSum[i-1], maxElement = max(maxElement, nums[i]);\n        if(maxElement <= 0) return maxElement;\n        int maxSum = maxElement;\n        for(int i = 0, j = nums.size(); ;){\n            while((i < nums.size()) && (nums[i] <= 0)) i++;\n            while((j > 1) && (nums[j-1] <= 0)) j--;\n            cout<<\"i: \"<<i<<\" j: \"<<j<<\"\\n\";\n            if(i >= j) break;\n            maxSum = max(maxSum, prefixSum[j-1] - ((i <= 0) ? 0 : prefixSum[i-1]));\n            while((i < nums.size()) && (nums[i] >= 0)) i++;\n            while((j > 1) && (nums[j-1] >= 0)) j--;\n            if(i >= j) break;\n        }\n        return maxSum;\n    }\n};","compare_result":"11111111111110111111111111111111111111111111111111111111011111111111111111111001111111011111111110100111111111111110111101110111111111111110111100111110011111110111010010011110011010000001011000110100000000011","title_slug":"maximum-subarray"}