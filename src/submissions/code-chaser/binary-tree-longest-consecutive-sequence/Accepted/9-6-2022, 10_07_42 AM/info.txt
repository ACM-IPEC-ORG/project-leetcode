{"id":792708028,"lang":"cpp","time":"3 weeks, 5 days","timestamp":1662439062,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/792708028/","is_pending":"Not Pending","title":"Binary Tree Longest Consecutive Sequence","memory":"38.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    int nodeHasValue(int expectedValue, TreeNode* node, unordered_map<TreeNode*, bool> &vis) {\n        if (node == nullptr)\n            return 0;\n        if (node -> val != expectedValue)\n            return 0;\n        vis[node] = 1;\n        return 1 + max(nodeHasValue(expectedValue + 1, node -> left, vis), nodeHasValue(expectedValue + 1, node -> right, vis));\n    }\npublic:\n    int longestConsecutive(TreeNode* root) {\n        if (!root)\n            return 0;\n        unordered_map<TreeNode*, bool> vis;\n        int maxValue = 1;\n        stack<TreeNode*> nodes;\n        nodes.push(root);\n        while (!nodes.empty()) {\n            TreeNode* curr = nodes.top();\n            nodes.pop();\n            if (curr -> right)\n                nodes.push(curr -> right);\n            if (curr -> left)\n                nodes.push(curr -> left);\n            if (!vis[curr])\n                maxValue = max(maxValue, nodeHasValue(curr -> val, curr, vis));\n        }\n        return maxValue;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-longest-consecutive-sequence"}