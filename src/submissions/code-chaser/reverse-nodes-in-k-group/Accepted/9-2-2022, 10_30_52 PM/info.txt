{"id":789778799,"lang":"cpp","time":"4 weeks, 1 day","timestamp":1662138052,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/789778799/","is_pending":"Not Pending","title":"Reverse Nodes in k-Group","memory":"11.5 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        ListNode* curr = head;\n        int size = 0;\n        while (curr) {\n            size++;\n            curr = curr -> next;\n        }\n        curr = head;\n        ListNode* resultHead = nullptr;\n        ListNode* prev = new ListNode(-1, head);\n        bool flag = true;\n        int COUNT = 0;\n        while (COUNT < (size/k)) {\n            ListNode *spotPrev = curr, *spotCurr = curr -> next;\n            int count = 1;\n            while (count < k) {\n                ListNode* temp = spotCurr -> next;\n                spotCurr -> next = spotPrev;\n                spotPrev = spotCurr;\n                spotCurr = temp;\n                count++;\n            }\n            if (!resultHead) {\n                 resultHead = spotPrev;\n            }\n            prev->next = spotPrev;\n            curr->next = spotCurr;\n            prev = curr;\n            curr = curr->next;\n            COUNT++;\n        }\n        return resultHead;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-k-group"}