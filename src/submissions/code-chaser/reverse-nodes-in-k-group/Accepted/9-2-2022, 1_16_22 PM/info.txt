{"id":789470112,"lang":"cpp","time":"4 weeks, 1 day","timestamp":1662104782,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/789470112/","is_pending":"Not Pending","title":"Reverse Nodes in k-Group","memory":"11.5 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        if (k == 1)\n            return head;\n        ListNode* curr = head;\n        int n = 0;\n        while (curr) {\n            n += 1;\n            curr = curr -> next;\n        }\n        curr = head;\n        ListNode* prev = head = new ListNode(-1, curr);\n        int count = 0;\n        while (count < floor(n / k)) {\n            ListNode* spotCurr = curr -> next;\n            ListNode* spotPrev = prev -> next;\n            int spotCount = 1;\n            while (spotCount < k) {\n                ListNode* next = spotCurr -> next;\n                spotCurr -> next = spotPrev;\n                spotPrev = spotCurr;\n                spotCurr = next;\n                spotCount += 1;\n            }\n            prev -> next = spotPrev;\n            curr -> next = spotCurr;\n            prev = curr;\n            curr = spotCurr;\n            count += 1;\n        }\n        return head -> next;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-k-group"}