{"id":790232439,"lang":"cpp","time":"4Â weeks","timestamp":1662191973,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/790232439/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"21.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root, bool upperGiven = 0, bool lowerGiven = 0, int upper = 0, int lower = 0) {\n        if (root == nullptr)\n            return true;\n        if (root -> left) {\n            if ((root -> left -> val) >= (root -> val))\n                return false;\n            if (lowerGiven)\n                if ((root -> left -> val) <= lower)\n                    return false;\n        }\n        if (root -> right) {\n            if ((root -> right -> val) <= (root -> val))\n                return false;\n            if (upperGiven)\n                if ((root -> right -> val) >= upper)\n                    return false;\n        }\n        return isValidBST(root -> left, 1, lowerGiven, root -> val, lower) && isValidBST(root -> right, upperGiven, 1, upper, root -> val);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-binary-search-tree"}