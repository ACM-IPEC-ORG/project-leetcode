{"id":790336314,"lang":"cpp","time":"4Â weeks","timestamp":1662203717,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/790336314/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    unordered_map<TreeNode*, int> dp;\n    int maxPathSumWithRoot(TreeNode* root) {\n        if (dp.find(root) != dp.end()) {\n            return dp[root];\n        }\n        if (!root) {\n            return dp[root] = 0;\n        }\n        int leftSubTree = maxPathSumWithRoot(root -> left);\n        int rightSubTree = maxPathSumWithRoot(root -> right);\n        return dp[root] = (leftSubTree > 0 ? leftSubTree : 0) + (root -> val) + (rightSubTree > 0 ? rightSubTree : 0);\n    }\npublic:\n    int maxPathSum(TreeNode* root) {\n        int res = 0;\n        stack<TreeNode*> postorder;\n        TreeNode* curr = root;\n        while ((curr) || (!postorder.empty())) {\n            if (curr) {\n                postorder.push(curr);\n                curr = curr -> left;\n            }\n            else {\n                TreeNode* spotCurr = postorder.top() -> right;\n                if (spotCurr) {\n                    curr = spotCurr;\n                }\n                else {\n                    spotCurr = postorder.top();\n                    postorder.pop();\n                    res = max(res, maxPathSumWithRoot(spotCurr));\n                    while ((!postorder.empty()) && (spotCurr == postorder.top() -> right)) {\n                        spotCurr = postorder.top();\n                        postorder.pop();\n                        res = max(res, maxPathSumWithRoot(spotCurr));\n                    }\n                }\n            }\n        }\n        return res;\n        \n    }\n};","compare_result":"1111011100111101111000110111111111111111110111111111111101110111111011101110111100000000000000","title_slug":"binary-tree-maximum-path-sum"}