{"id":553740476,"lang":"cpp","time":"1Â year","timestamp":1631466952,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/553740476/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"13 MB","code":"/*\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n--||author : codechaser||-- \n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*/\nclass Solution\n{\n    ListNode *merge(vector<ListNode *> &lists, int left, int right)\n    {\n        if (left == right)\n            return lists[left];\n        int k = right - left + 1;\n        ListNode *p1 = NULL, *p2 = NULL, *head = NULL, *p;\n        p1 = merge(lists, left, left + k / 2 - 1);\n        p2 = merge(lists, (left + k / 2), right);\n        if (!p1 && !p2)\n            return head;\n        else if (!p1)\n            return p2;\n        else if (!p2)\n            return p1;\n\n        if (!p2 || (p2 && p1->val < p2->val))\n        {\n            head = p1;\n            p1 = p1->next;\n        }\n        else\n        {\n            head = p2;\n            p2 = p2->next;\n        }\n        p = head;\n        while (p1 or p2)\n        {\n            if (!p1)\n            {\n                p->next = p2;\n                p2 = p2->next;\n                p = p->next;\n            }\n            else if (!p2)\n            {\n                p->next = p1;\n                p1 = p1->next;\n                p = p->next;\n            }\n            else if (p1->val < p2->val)\n            {\n                p->next = p1;\n                p1 = p1->next;\n                p = p->next;\n            }\n            else\n            {\n                p->next = p2;\n                p2 = p2->next;\n                p = p->next;\n            }\n        }\n        return head;\n    }\n\npublic:\n    ListNode *mergeKLists(vector<ListNode *> &lists)\n    {\n        int k = lists.size();\n        if (k == 0)\n            return NULL;\n        if (k == 1)\n            return lists[0];\n        ListNode *head = NULL, *p1 = NULL, *p2 = NULL, *p;\n        p1 = merge(lists, 0, k / 2);\n        if ((k / 2) + 1 <= k - 1)\n        {\n            p2 = merge(lists, (k / 2) + 1, k - 1);\n        }\n        if (!p1 && !p2)\n            return head;\n        else if (!p1)\n            return p2;\n        else if (!p2)\n            return p1;\n        if (!p2 || (p2 && p1->val < p2->val))\n        {\n            head = p1;\n            p1 = p1->next;\n        }\n        else\n        {\n            head = p2;\n            p2 = p2->next;\n        }\n        p = head;\n        while (p1 or p2)\n        {\n            if (!p1)\n            {\n                p->next = p2;\n                p2 = p2->next;\n                p = p->next;\n            }\n            else if (!p2)\n            {\n                p->next = p1;\n                p1 = p1->next;\n                p = p->next;\n            }\n            else if (p1->val < p2->val)\n            {\n                p->next = p1;\n                p1 = p1->next;\n                p = p->next;\n            }\n            else\n            {\n                p->next = p2;\n                p2 = p2->next;\n                p = p->next;\n            }\n        }\n        return head;\n    }\n};\n/*\n    |---------------------------------------------------|\n    |||   https://codeforces.com/profile/codechaser   |||\n    |||   https://www.codechef.com/users/codechaser   |||\n    |||        https://github.com/code-chaser         |||\n    |---------------------------------------------------|\n*/","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists"}