{"id":790221020,"lang":"cpp","time":"4Â weeks","timestamp":1662190668,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/790221020/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"14.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        priority_queue<pair<int, ListNode*>, vector<pair<int, ListNode*>>, greater<pair<int, ListNode*>>> nodes;\n        for (ListNode* i : lists) {\n            ListNode* curr = i;\n            while (curr) {\n                nodes.push({curr -> val, curr});\n                curr = curr -> next;\n            }\n        }\n        if (nodes.empty())\n            return nullptr;\n        ListNode* resultHead = nodes.top().second;\n        resultHead -> next = nullptr;\n        ListNode* curr = resultHead;\n        nodes.pop();\n        while (!nodes.empty()) {\n            pair<int, ListNode*> front = nodes.top();\n            nodes.pop();\n            curr -> next = front.second;\n            curr = curr -> next;\n        }\n        curr -> next = nullptr;\n        return resultHead;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists"}