{"id":791292712,"lang":"cpp","time":"3 weeks, 6 days","timestamp":1662294709,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/791292712/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"12.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        TreeNode* last = nullptr;\n        TreeNode* curr = root;\n        stack<TreeNode*> nodes;\n        while (curr || (!nodes.empty())) {\n            if (curr) {\n                nodes.push(curr);\n                last = curr;\n                curr = curr -> left;\n            }\n            else {\n                TreeNode* temp = nodes.top() -> right;\n                nodes.pop();\n                if (temp)\n                    curr = last -> left = temp;\n            }\n        }\n        curr = root;\n        while (curr) {\n            curr -> right = curr -> left;\n            curr -> left = nullptr;\n            curr = curr -> right;\n        }\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list"}