{"id":790511156,"lang":"cpp","time":"4Â weeks","timestamp":1662218200,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/790511156/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        TreeNode* curr;\n        stack<TreeNode*> nodes;\n        \n        vector<int> leftTraversal;\n        curr = root -> left;\n        while (curr || (!nodes.empty())) {\n            if (curr) {\n                nodes.push(curr);\n                curr = curr -> left;\n            }\n            else {\n                leftTraversal.push_back(nodes.top() -> val);\n                curr = nodes.top() -> right;\n                nodes.pop();\n            }\n        }\n        \n        vector<int> rightTraversal;\n        curr = root -> right;\n        while (curr || (!nodes.empty())) {\n            if (curr) {\n                nodes.push(curr);\n                curr = curr -> right;\n            }\n            else {\n                rightTraversal.push_back(nodes.top() -> val);\n                curr = nodes.top() -> left;\n                nodes.pop();\n            }\n        }\n        \n        return leftTraversal == rightTraversal;\n    }\n};","compare_result":"110111111011111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree"}