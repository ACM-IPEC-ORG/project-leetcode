{"id":646842873,"lang":"cpp","time":"7 months, 1 week","timestamp":1645547801,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/646842873/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\nprivate:\n    map<int,int> cache, status, pointr;\n    int k=INT_MIN;\n    stack<int> LRUstack;\n    int capacity;\npublic:\n    LRUCache(int capacity) {\n        this->capacity=capacity;\n    }\n    \n    int get(int key) {\n        if(cache.find(key)!=cache.end()){\n            pointr.erase(status[key]);\n            status[key]=k;\n            pointr[k]=key;\n            k++;\n            return cache[key];\n        }\n        return -1;\n    }\n    \n    void put(int key, int value) {\n        if(!capacity) return;\n        cout<<\"\\n---1---\\n\";\n        for(auto i : cache) cout<<\"\\nelement: \"<<i.first<<\" \"<<i.second;\n        cout<<\"\\n-------\\n\";\n        cout<<\"\\n---2---\\n\";\n        for(auto i : status) cout<<\"\\nelement: \"<<i.first<<\" \"<<i.second;\n        cout<<\"\\n-------\\n\";\n        cout<<\"\\n---3---\\n\";\n        for(auto i : pointr) cout<<\"\\nelement: \"<<i.first<<\" \"<<i.second;\n        cout<<\"\\n-------\\n\";\n        cout<<\"\\nchapacity = \"<<capacity<<\"\\nsaaiz = \"<<cache.size()<<\"\\n\";\n        if(cache.size()<capacity){\n            cache[key] = value;\n            status[key]=k;\n            pointr[k]=key;\n            k++;\n        }\n        else{\n            for(auto i : pointr){\n                status.erase(i.second);\n                cache.erase(i.second);\n                pointr.erase(i.first);\n                break;\n            }\n            cache[key] = value;\n            status[key]=k;\n            pointr[k]=key;\n            k++;\n        }\n        \n        cout<<\"\\n---4---\\n\";\n        for(auto i : cache) cout<<\"\\nelement: \"<<i.first<<\" \"<<i.second;\n        cout<<\"\\n-------\\n\";\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1111111111011100000000","title_slug":"lru-cache"}